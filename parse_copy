#!/Users/aaronmcleod/.rvm/rubies/ruby-1.9.2-p136/bin/ruby
$:.unshift(File.dirname(__FILE__))
require "copy_process"
include CopyProcess

file_contents_retrieved = false

# initalizes file array
files = []

puts "Please enter in the file path to the text document you wish to parse.\nSeparate multiple file names by using a semicolon."
contents = gets.chomp

# initialize variables
file_contents = ""
headers = ""

# if they entered a value, continue on
unless contents.nil? || contents == ''
  file_names = ''
  if contents.match(/^\*\.[a-z]{1,}/).nil?
    file_names = contents.split(';')
  else
    file_names = Dir[contents]
  end
  
  file_names.each do |file_name|
    # set the string to empty, so it doesn't concatenate with previous data
    file_contents = ""
    begin
      File.open(file_name.strip, 'r+') do |file| 
        file.each_line do |line|
          line = line.gsub(/\t|\n/, '').strip
          file_contents = "#{file_contents}#{line}\n" unless line == ''
        end
      end
      headers = contains_valid_headers(file_contents)
      unless headers
        raise "Headers not found in file: #{file_name}"
      else
        files << CopyFile.new(file_contents, headers[0], headers[1], headers[2], file_name)
      end
    rescue Errno::ENOENT
      puts "  Error => File not found: #{file_name}"
    end 
  end
else
  puts 'contents were nil'
end

def element_type_has_no_variaton(type_name)
  
end

if files.size > 0
  final_rows = []
  types_and_keywords = []
  keywords = []
  types = []
  files.each do |file_obj|
    file_obj.elements_out.each do |ele|
      keywords << ele.kw unless keywords.include?(ele.kw)
      types << ele.type_name unless types.include?(ele.type_name)
      final_rows << ele.content
      types_and_keywords << "#{ele.type_name}+#{ele.kw}" unless types_and_keywords.include?("#{ele.type_name}+#{ele.kw}")
    end
  end
  keywords.each do |k|
    types.each do |t|
      unless types_and_keywords.include?("#{t}+#{k}")
        final_rows << "#{t},<!-- empty -->,empty element for: #{t}+#{k}"
      end
    end
  end
  
  File.open('out.csv', 'w+') do |f|
    f.write "ParentType,TypeID,ElementID,ParentTypeName,TypeName,Content,Notes\n"
    final_rows.each { |e| f.write ",,,,#{e}\n" }
  end
else
  puts 'no file objects'
end